
1. Selective Search Algorithm
1) 先根据像素相似性，用MST对像素进行分类与分块
一个像素与周围8个点都有边连接，但每个边的权重是根据像素相似性确定的。
两个像素越相似，权重越小

2)在实现的C++代码中，采用了下标 (y*width +x) 来表示像素位置， 对应的p 属性是分类过程，或者是最小生成树形成过程
3)p值最开始时是每个像素的下标，随着分类的进行，会修改p值为新分类的像素点的下标。随着分类的逐渐收敛， 会出现 a 与b 分到一类，b 与 c 分到一类， 这种情况 a的p值设置为b的下标， b的p值设置为c的下标。有点类似 链表的数据结构

2. 存在的问题
1) 算法是一个串行的过程， 每一步的运算依赖前一步的运算结果。这种算法不利于并行化。
2) 像素的分类有些盲目，这样会构成太多无用的Region。比较理想的方法是采用深度学习的网络结构提取特征，然后看看特征是否包括目标的特征。
3) 需要进一步了解RPN (Region Proposal Network)的细节，才好比较RPN与Selective Search

